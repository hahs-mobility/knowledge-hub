{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Knowledge Hub","text":"<p>Welcome to our Knowledge Hub, a collection of guides and resources to help you succeed with our products.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>Found an issue or have a suggestion?</p> <p>Contact us </p>"},{"location":"#support","title":"Support","text":"<p>Info</p> <p>For product-specific support, please contact our customer support team through your official support channel.</p>"},{"location":"guides/autossh/","title":"Create SSH Tunnel with AutoSSH","text":"<p>This repository provides guidance on creating persistent <code>SSH tunnels</code> using <code>AutoSSH</code> to securely access remote resources.</p>"},{"location":"guides/autossh/#guides","title":"Guides","text":"<ul> <li> <p> Step-by-Step Guide</p> <p>A detailed walkthrough for setting up and configuring AutoSSH tunnels</p> </li> </ul>"},{"location":"guides/autossh/#what-is-autossh","title":"What is AutoSSH?","text":"<p>AutoSSH is a program to start a copy of SSH and monitor it, restarting it as necessary should it die or stop passing traffic. It's particularly useful for maintaining persistent SSH tunnels and port forwarding connections.</p>"},{"location":"guides/autossh/#key-benefits","title":"Key Benefits","text":"<ul> <li>Persistent Connections: Automatically restarts SSH connections if they fail</li> <li>Port Forwarding: Create secure tunnels for accessing remote services</li> <li>Monitoring: Built-in connection monitoring and health checks</li> <li>Reliability: Handles network interruptions gracefully</li> </ul>"},{"location":"guides/autossh/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Access internal services through a bastion host</li> <li>Secure database connections</li> <li>Remote development environments</li> <li>Bypassing network restrictions securely</li> </ul> <p>Warning</p> <p>This guide provides a generic configuration example intended for informational purposes only.</p> <p>Users must thoroughly test all configurations in a non-production environment before deploying to a production system.</p> <p>We are not responsible for any direct or indirect harm, damages, or operational issues resulting from the use or misapplication of this guide without prior validation.</p>"},{"location":"guides/autossh/step-by-step/","title":"AutoSSH Step-by-Step Guide","text":"<p>This guide will walk you through the process of setting up and configuring AutoSSH to create persistent SSH tunnels.</p> <p>About Host Key Verification</p> <p>The examples in this guide include <code>StrictHostKeyChecking=no</code> and <code>UserKnownHostsFile=/dev/null</code> options, which are suitable for dynamic environments where remote hosts may change (containers, cloud instances, auto-scaling). </p> <p>For static environments with consistent hosts, you can remove these options for better security.</p>"},{"location":"guides/autossh/step-by-step/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>SSH access to the target server</li> <li>SSH key-based authentication configured (recommended)</li> <li>AutoSSH installed on your local machine</li> <li>Basic understanding of SSH and port forwarding concepts</li> </ul>"},{"location":"guides/autossh/step-by-step/#step-1-install-autossh","title":"Step 1: Install AutoSSH","text":""},{"location":"guides/autossh/step-by-step/#on-ubuntudebian","title":"On Ubuntu/Debian","text":"Install AutoSSH on Ubuntu/Debian<pre><code>sudo apt update\nsudo apt install autossh\n</code></pre>"},{"location":"guides/autossh/step-by-step/#on-centosrhelfedora","title":"On CentOS/RHEL/Fedora","text":"Install AutoSSH on CentOS/RHEL/Fedora<pre><code>sudo yum install autossh\n# or for newer versions\nsudo dnf install autossh\n</code></pre>"},{"location":"guides/autossh/step-by-step/#step-2-configure-ssh-key-authentication","title":"Step 2: Configure SSH Key Authentication","text":"<ol> <li>Generate SSH key pair (if you don't have one):</li> </ol> Generate SSH key pair<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n</code></pre> <ol> <li>Copy your public key to the remote server:</li> </ol> Copy SSH public key to remote server<pre><code>ssh-copy-id username@remote-server.com\n</code></pre> <ol> <li>Test the connection:</li> </ol> Test SSH connection<pre><code>ssh username@remote-server.com\n</code></pre>"},{"location":"guides/autossh/step-by-step/#step-3-basic-autossh-usage","title":"Step 3: Basic AutoSSH Usage","text":""},{"location":"guides/autossh/step-by-step/#simple-port-forwarding","title":"Simple Port Forwarding","text":"<p>Forward local port 8080 to remote server's port 80:</p> Simple port forwarding with AutoSSH<pre><code>autossh -M 0 -i ~/.ssh/ssh_key \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -L 8080:localhost:80 username@remote-server.com\n</code></pre>"},{"location":"guides/autossh/step-by-step/#reverse-port-forwarding","title":"Reverse Port Forwarding","text":"<p>Forward remote port 8080 to local port 80:</p> Reverse port forwarding with AutoSSH<pre><code>autossh -M 0 -i ~/.ssh/ssh_key \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -R 8080:localhost:80 username@remote-server.com\n</code></pre>"},{"location":"guides/autossh/step-by-step/#dynamic-port-forwarding-socks-proxy","title":"Dynamic Port Forwarding (SOCKS Proxy)","text":"<p>Create a SOCKS proxy on local port 1080:</p> Dynamic port forwarding (SOCKS proxy)<pre><code>autossh -M 0 -i ~/.ssh/ssh_key \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -D 1080 username@remote-server.com\n</code></pre>"},{"location":"guides/autossh/step-by-step/#step-4-advanced-configuration","title":"Step 4: Advanced Configuration","text":""},{"location":"guides/autossh/step-by-step/#complete-cli-command","title":"Complete CLI Command","text":"<p>Instead of using SSH config files, specify all options directly in the command line:</p> Complete CLI command with all options<pre><code>autossh -M 0 -N -i ~/.ssh/ssh_key \\\n  -o ServerAliveInterval=60 \\\n  -o ServerAliveCountMax=10 \\\n  -o ConnectTimeout=30 \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -o IdentitiesOnly=yes \\\n  -o PasswordAuthentication=no \\\n  -o TCPKeepAlive=yes \\\n  -L 8080:localhost:80 \\\n  username@remote-server.com\n</code></pre>"},{"location":"guides/autossh/step-by-step/#background-operation","title":"Background Operation","text":"<p>Run AutoSSH in the background:</p> Background AutoSSH operation<pre><code>autossh -M 0 -f -N -i ~/.ssh/ssh_key \\\n  -o ServerAliveInterval=60 \\\n  -o ServerAliveCountMax=10 \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -L 8080:localhost:80 \\\n  username@remote-server.com\n</code></pre> <p>Options explained:</p> <ul> <li><code>-M 0</code>: Disable AutoSSH's built-in monitoring ports, rely on SSH's ServerAliveInterval instead</li> <li><code>-f</code>: Run in background</li> <li><code>-N</code>: Don't execute remote commands</li> <li><code>-i ~/.ssh/ssh_key</code>: Specify the SSH private key to use</li> <li><code>-L</code>: Local port forwarding</li> <li><code>-o ServerAliveInterval=60</code>: Send keepalive every 60 seconds</li> <li><code>-o ServerAliveCountMax=10</code>: Allow 10 failed keepalives before disconnecting</li> </ul>"},{"location":"guides/autossh/step-by-step/#command-line-options-reference","title":"Command Line Options Reference","text":"<p>Here's a comprehensive breakdown of AutoSSH and SSH options commonly used in production environments:</p>"},{"location":"guides/autossh/step-by-step/#example-production-command","title":"Example Production Command","text":"Production AutoSSH command with all options<pre><code>autossh -M 0 -N -i ~/.ssh/ssh_key \\\n  -o ServerAliveInterval=60 \\\n  -o ServerAliveCountMax=10 \\\n  -o ConnectTimeout=30 \\\n  -o ExitOnForwardFailure=no \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -o IdentitiesOnly=yes \\\n  -o PasswordAuthentication=no \\\n  -o TCPKeepAlive=yes \\\n  -L 8080:localhost:80 \\\n  user@ipaddr\n</code></pre>"},{"location":"guides/autossh/step-by-step/#autossh-options","title":"AutoSSH Options","text":"<ul> <li> <p><code>-M 0</code>: Disable AutoSSH's built-in monitoring port mechanism. When set to 0, AutoSSH relies on SSH's <code>ServerAliveInterval</code> and <code>ServerAliveCountMax</code> for connection monitoring instead of creating its own monitoring ports.</p> </li> <li> <p><code>-N</code>: Don't execute any remote commands. This is essential for port forwarding as you only want the tunnel, not an interactive shell session.</p> </li> </ul>"},{"location":"guides/autossh/step-by-step/#ssh-connection-options-o-flags","title":"SSH Connection Options (<code>-o</code> flags)","text":""},{"location":"guides/autossh/step-by-step/#connection-monitoring","title":"Connection Monitoring","text":"<ul> <li> <p><code>ServerAliveInterval=60</code>: Send a keepalive message to the server every 60 seconds. This helps detect if the connection has been dropped and prevents NAT timeouts.</p> </li> <li> <p><code>ServerAliveCountMax=10</code>: Maximum number of server alive messages that can be sent without receiving a response before SSH disconnects. Combined with <code>ServerAliveInterval=60</code>, the connection will timeout after 10 minutes (60s \u00d7 10) of no response.</p> </li> <li> <p><code>TCPKeepAlive=yes</code>: Enable TCP keepalive messages. This works at the TCP level (below SSH) to detect dead connections and prevent intermediate devices from dropping idle connections.</p> </li> </ul>"},{"location":"guides/autossh/step-by-step/#connection-establishment","title":"Connection Establishment","text":"<ul> <li><code>ConnectTimeout=30</code>: Maximum time (in seconds) to wait when establishing the initial connection. If the connection cannot be established within 30 seconds, it will timeout and fail.</li> </ul>"},{"location":"guides/autossh/step-by-step/#error-handling","title":"Error Handling","text":"<ul> <li><code>ExitOnForwardFailure=no</code>: Don't exit if port forwarding fails. This allows the SSH connection to remain active even if the specific port forward cannot be established, which can be useful for resilient connections.</li> </ul>"},{"location":"guides/autossh/step-by-step/#security-options","title":"Security Options","text":"<ul> <li> <p><code>StrictHostKeyChecking=no</code>: Don't prompt to verify the server's host key. This bypasses the \"unknown host\" prompt but reduces security as it won't detect man-in-the-middle attacks. Use with caution.</p> </li> <li> <p><code>UserKnownHostsFile=/dev/null</code>: Don't save or read host keys from the known_hosts file. Combined with <code>StrictHostKeyChecking=no</code>, this prevents host key verification entirely.</p> </li> <li> <p><code>IdentitiesOnly=yes</code>: Only use explicitly specified SSH keys, ignore SSH agent and default key locations. This ensures predictable authentication behavior.</p> </li> <li> <p><code>PasswordAuthentication=no</code>: Disable password authentication, forcing key-based authentication only. This improves security and prevents password prompts.</p> </li> </ul> <p>When to Use Host Key Bypass Options</p> <p>The options <code>StrictHostKeyChecking=no</code> and <code>UserKnownHostsFile=/dev/null</code> should only be used when the remote host is expected to change:</p> <ul> <li>Dynamic environments: Container deployments, auto-scaling groups, load balancers</li> <li>Cloud infrastructure: Instances with changing IP addresses or host keys</li> <li>Development environments: Frequently recreated servers</li> </ul> <p>For stable environments with consistent hosts, remove these options and use proper host key verification for better security.</p>"},{"location":"guides/autossh/step-by-step/#port-forwarding","title":"Port Forwarding","text":"<ul> <li><code>-L 8080:localhost:80</code>: Create a local port forward from local port 8080 to port 80 on the remote server's localhost. Format is <code>local_port:remote_host:remote_port</code>.</li> </ul>"},{"location":"guides/autossh/step-by-step/#step-5-create-persistent-service","title":"Step 5: Create Persistent Service","text":""},{"location":"guides/autossh/step-by-step/#using-systemd-linux","title":"Using systemd (Linux)","text":"<p>Create <code>/etc/systemd/system/autossh-tunnel.service</code>:</p> systemd service configuration for AutoSSH<pre><code>[Unit]\nDescription=AutoSSH Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nUser=yourusername\nExecStart=/usr/bin/autossh -M 0 -N -i /home/yourusername/.ssh/ssh_key \\\n  -o ServerAliveInterval=60 \\\n  -o ServerAliveCountMax=10 \\\n  -o ConnectTimeout=30 \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -o IdentitiesOnly=yes \\\n  -o PasswordAuthentication=no \\\n  -o TCPKeepAlive=yes \\\n  -L 8080:localhost:80 username@remote-server.com\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Enable and start the service:</p> Enable and start AutoSSH systemd service<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable autossh-tunnel.service\nsudo systemctl start autossh-tunnel.service\n</code></pre>"},{"location":"guides/autossh/step-by-step/#step-6-testing-and-troubleshooting","title":"Step 6: Testing and Troubleshooting","text":""},{"location":"guides/autossh/step-by-step/#verify-the-tunnel","title":"Verify the Tunnel","text":"<p>Test that your tunnel is working:</p> Verify tunnel functionality<pre><code># For local port forwarding\ncurl http://localhost:8080\n\n# Check if the process is running\nps aux | grep autossh\n</code></pre>"},{"location":"guides/autossh/step-by-step/#advanced-testing-with-netcat","title":"Advanced Testing with Netcat","text":"<p>For more comprehensive tunnel testing, use netcat (nc) to test connectivity:</p> Test tunnel connectivity with netcat<pre><code># Test if local port is listening\nnc -zv localhost 8080\n\n# Test connection from the tunnel endpoint (run on remote server)\nnc -l 80\n\n# Send test data through the tunnel\necho \"test message\" | nc localhost 8080\n\n# Test UDP forwarding (if configured)\nnc -u localhost 8080\n</code></pre> <p>Test scenarios:</p> <ol> <li>Port availability: Use <code>nc -zv</code> to verify the local port is listening</li> <li>Data transmission: Send test data through the tunnel to verify bidirectional communication</li> <li>Connection persistence: Monitor if connections remain stable over time</li> <li>Multiple connections: Test concurrent connections through the tunnel</li> </ol>"},{"location":"guides/autossh/step-by-step/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li>Connection Refused: Check if the remote service is running and accessible</li> <li>Port Already in Use: Choose a different local port</li> <li>SSH Key Issues: Verify SSH key authentication works manually</li> <li>Firewall Blocking: Ensure required ports are open</li> </ol>"},{"location":"guides/autossh/step-by-step/#monitoring-options","title":"Monitoring Options","text":"<p>Set environment variables for better monitoring:</p> AutoSSH monitoring environment variables<pre><code>export AUTOSSH_LOGFILE=/var/log/autossh.log\nexport AUTOSSH_LOGLEVEL=7\nexport AUTOSSH_DEBUG=1\n</code></pre>"},{"location":"guides/autossh/step-by-step/#step-7-security-best-practices","title":"Step 7: Security Best Practices","text":"<ol> <li>Use Key-Based Authentication: Never use password authentication</li> <li>Restrict SSH Access: Configure SSH to allow only key-based auth</li> <li>Limit Port Forwarding: Use <code>PermitTunnel</code> and <code>AllowTcpForwarding</code> directives</li> <li>Monitor Connections: Regularly check tunnel status and logs</li> <li>Use Non-Standard Ports: Avoid well-known ports when possible</li> </ol>"},{"location":"guides/autossh/step-by-step/#example-use-cases","title":"Example Use Cases","text":""},{"location":"guides/autossh/step-by-step/#database-access-through-bastion","title":"Database Access Through Bastion","text":"Database access through bastion host<pre><code>autossh -M 0 -i ~/.ssh/ssh_key \\\n  -o ServerAliveInterval=60 \\\n  -o ServerAliveCountMax=10 \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -L 5432:database-server:5432 \\\n  username@bastion-host.com\n</code></pre>"},{"location":"guides/autossh/step-by-step/#web-development-server-access","title":"Web Development Server Access","text":"Web development server access<pre><code>autossh -M 0 -i ~/.ssh/ssh_key \\\n  -o ServerAliveInterval=60 \\\n  -o ServerAliveCountMax=10 \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -L 3000:internal-dev-server:3000 \\\n  username@gateway.company.com\n</code></pre>"},{"location":"guides/autossh/step-by-step/#multiple-port-forwarding","title":"Multiple Port Forwarding","text":"Multiple port forwarding example<pre><code>autossh -M 0 -i ~/.ssh/ssh_key \\\n  -o ServerAliveInterval=60 \\\n  -o ServerAliveCountMax=10 \\\n  -o StrictHostKeyChecking=no \\\n  -o UserKnownHostsFile=/dev/null \\\n  -L 8080:web-server:80 \\\n  -L 3306:db-server:3306 \\\n  -L 6379:redis-server:6379 \\\n  username@bastion.com\n</code></pre> <p>Pro Tips</p> <ul> <li>When using <code>-M 0</code>, always include <code>-o ServerAliveInterval=60</code> and <code>-o ServerAliveCountMax=10</code> for proper connection monitoring</li> <li>Always specify the SSH key explicitly with <code>-i ~/.ssh/ssh_key</code> for predictable authentication</li> <li>Consider using SSH multiplexing for multiple connections to the same host</li> <li>Always test your tunnels in a non-production environment first</li> </ul>"},{"location":"guides/aws-iam-user/","title":"AWS Access User Role","text":"<p>This repository provides guidance on creating <code>IAM users</code> to access our resources.</p>"},{"location":"guides/aws-iam-user/#guides","title":"Guides","text":"<ul> <li> <p> Step-by-Step Guide</p> <p>A detailed walkthrough for manually creating IAM users and assigning</p> </li> <li> <p> Terraform Configuration</p> <p>Automate the creation of <code>IAM users</code> and <code>IAM roles</code> using <code>Terraform</code>.</p> <p>This guide will provide the necessary code to bootstrap all necessary resources in a given AWS account.</p> </li> </ul> <p>Warning</p> <p>This guide provides a generic configuration example intended for informational purposes only.</p> <p>Users must thoroughly test all configurations in a non-production environment before deploying to a production system.</p> <p>We are not responsible for any direct or indirect harm, damages, or operational issues resulting from the use or misapplication of this guide without prior validation.</p>"},{"location":"guides/aws-iam-user/step-by-step/","title":"AWS Account and IAM Setup Guide","text":"<p>Here's a <code>step-by-step</code> guide to creating an account in <code>AWS</code>, creating an IAM role, creating an IAM user, and then adding that user to the role:</p>"},{"location":"guides/aws-iam-user/step-by-step/#create-an-aws-account","title":"Create an <code>AWS</code> Account","text":"<ol> <li>Go to the <code>AWS</code> website:<ul> <li>Open a web browser and go to AWS.</li> </ul> </li> <li>Click on <code>Create a Free Account</code>:<ul> <li>This is located in the upper-right corner of the <code>AWS</code> homepage.</li> </ul> </li> <li>Provide Your Email Address:<ul> <li>You'll be prompted to provide an <code>email address</code>, <code>account name (organization name)</code>, and a <code>password</code> for your <code>AWS</code> account.</li> </ul> </li> <li>Enter Payment Information:<ul> <li><code>AWS</code> will ask for a valid credit card. You won't be charged unless you use paid services.</li> </ul> </li> <li>Verify Your Identity:<ul> <li>This step may include entering a phone number for verification and completing <code>CAPTCHA</code>.</li> </ul> </li> <li>Select a Support Plan:<ul> <li>Choose the free basic support plan unless you need more advanced features.</li> </ul> </li> <li>Complete the Sign-Up Process:<ul> <li>Once you've entered all the details, you'll need to confirm your information and sign in using your new <code>AWS credentials</code>.</li> </ul> </li> </ol> <p>Once your account is created and verified, you'll be logged into the <code>AWS Management Console</code>.</p>"},{"location":"guides/aws-iam-user/step-by-step/#create-an-iam-role","title":"Create an IAM Role","text":"<p>An IAM role is a set of permissions that you can assign to users or services.</p> <ol> <li>Sign in to <code>AWS</code> Console:<ul> <li>Go to the <code>AWS Management Console</code> and log in using your <code>AWS credentials</code>.</li> </ul> </li> <li>Navigate to <code>IAM</code>:<ul> <li>In the top search bar, type <code>IAM</code> and select the <code>IAM service</code>.</li> </ul> </li> <li>Create a New Role:<ul> <li>In the left-hand navigation pane, click Roles.</li> <li>Click the Create role button.</li> </ul> </li> <li>Select <code>Trusted Entity</code>: Choose the type of trusted entity.<ul> <li>If you want to create a role for an <code>AWS service</code> (e.g., <code>EC2</code>, <code>Lambda</code>), select <code>AWS service</code>.</li> </ul> </li> <li>Choose the Use Case for the Role:<ul> <li>For example, if you're creating a role for <code>EC2 instances</code>, select <code>EC2</code>.</li> </ul> </li> <li>Set Permissions:<ul> <li>Choose the permissions you want to attach to this role. For example, if you want to grant full access to EC2, select AmazonEC2FullAccess.</li> </ul> </li> <li>Add Tags (Optional):<ul> <li>Tags can help you categorize and identify the role.</li> </ul> </li> <li>Review and Create:<ul> <li>Enter a role name and review the permissions and settings.</li> <li>Click Create role.</li> </ul> </li> </ol> <p>Now you have an IAM role that can be assumed by a user or AWS service.</p>"},{"location":"guides/aws-iam-user/step-by-step/#create-an-iam-user","title":"Create an IAM User","text":"<p>IAM</p> <p>An IAM user is an individual identity within AWS with specific permissions.</p> <ol> <li>Navigate to IAM:<ul> <li>If you're not already in the <code>IAM section</code>, go back to the <code>AWS Management Console</code> and search for <code>IAM</code>.</li> </ul> </li> <li>Create a New User:<ul> <li>In the IAM dashboard, click Users on the left.</li> <li>Click the Add user button.</li> </ul> </li> <li>Set User Details:<ul> <li>Enter a username.</li> <li>Choose the type of access the user will have:<ul> <li>Programmatic access (for API/CLI access).</li> <li>AWS Management Console access (for web access).</li> </ul> </li> <li>Set a password if you chose AWS Management Console access.</li> </ul> </li> <li>Set Permissions:<ul> <li>Choose Attach policies directly if you want to assign specific permissions. For example, choose AdministratorAccess for full access.</li> <li>Alternatively, you can assign the user to a group or copy permissions from another user.</li> </ul> </li> <li>Review and Create: Review the user settings and click Create user.</li> </ol> <p>Once the user is created, make sure to save the access credentials (Access Key ID, Secret Access Key, and password for console access) provided on the next page.</p>"},{"location":"guides/aws-iam-user/step-by-step/#add-the-iam-user-to-the-iam-role","title":"Add the IAM User to the IAM Role","text":"<p>Now that you have created the role and user, you need to allow the IAM user to assume the IAM role.</p> <ol> <li>Navigate to <code>IAM Console</code>:<ul> <li>In the <code>AWS Console</code>, go to the <code>IAM section</code>.</li> </ul> </li> <li>Attach Role to User:<ul> <li>Click Users on the left sidebar.</li> <li>Select the user you just created.</li> <li>In the <code>Permissions tab</code>, click <code>Add permissions</code>.</li> </ul> </li> <li>Grant Permission to Assume Role:<ul> <li>Click Attach policies directly.</li> <li>Search for the <code>IAMPolicy</code> that allows users to assume a role, or create your own policy (e.g., <code>IAMReadOnlyAccess</code> or <code>AdministratorAccess</code>).</li> </ul> </li> <li>Add Custom Permissions (if necessary):<ul> <li>If you are using a custom policy, ensure it allows <code>sts:AssumeRole</code> for the role you created before.</li> </ul> </li> <li>Review and Add:<ul> <li>After attaching the permissions, click <code>Review</code> and then <code>Add permissions</code>.</li> </ul> </li> </ol>"},{"location":"guides/aws-iam-user/step-by-step/#optional-create-a-custom-policy-to-assume-the-role","title":"Optional: Create a Custom Policy to Assume the Role","text":"<p>If you need a more specific policy (e.g., to allow the user to assume only a certain role), follow these steps:</p> <ol> <li> <p>Create a New Policy:</p> <ul> <li>Go to <code>IAM &gt; Policies &gt; Create policy</code>.</li> <li>Under the <code>JSON</code> tab, paste a policy like the one below (substitute with your role <code>ARN</code>):</li> </ul> Example IAM Policy for assuming a role<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Resource\": \"arn:aws:iam::YOUR_ACCOUNT_ID:role/YOUR_ROLE_NAME\"\n    }\n  ]\n}\n</code></pre> </li> <li> <p>Attach the Custom Policy to the User:</p> <ul> <li>Follow the steps to attach this new policy to the user as shown in the previous section.</li> </ul> </li> </ol>"},{"location":"guides/aws-iam-user/step-by-step/#test-the-users-access","title":"Test the User's Access","text":"<ol> <li> <p>Log in as the User:</p> <ul> <li>Using the IAM user credentials (either console login or programmatic), sign in.</li> </ul> </li> <li> <p>Test Role Assumption:</p> <ul> <li>If you created an IAM role to be assumed, test by having the user assume the role.</li> <li>You can do this through the <code>AWS Management Console</code> or by using the <code>AWS CLI</code>.</li> </ul> </li> </ol>"},{"location":"guides/aws-iam-user/step-by-step/#adding-custom-s3-and-kms-access-policy","title":"Adding Custom S3 and KMS Access Policy","text":"<p>If you want to give the user specific access to <code>S3 buckets</code> and <code>KMS keys</code>, follow these steps to create and attach a custom policy:</p> <ol> <li>Navigate to IAM Console: Go to the <code>AWS Management Console</code> and search for <code>IAM</code>.</li> <li>Create a <code>New Policy</code>:</li> <li>In the left sidebar, click on <code>Policies</code>.</li> <li>Click <code>Create policy</code>.</li> <li>Select the <code>JSON</code> tab.</li> <li>Delete the default policy and paste the following policy (update as needed):</li> </ol> Example IAM Policy for S3 and KMS access<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"S3Access\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::s3-example-bucket\",\n        \"arn:aws:s3:::s3-example-bucket/*\"\n      ]\n    },\n    {\n      \"Sid\": \"KMSAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:ReEncrypt*\",\n        \"kms:GenerateDataKey*\",\n        \"kms:Encrypt\",\n        \"kms:DescribeKey\",\n        \"kms:Decrypt\"\n      ],\n      \"Resource\": \"arn:aws:kms:eu-central-1:000000000000:key/xxxxxxx-xxxxxxx-xxxxxxx-xxxxxxx\"\n    }\n  ]\n}\n</code></pre> <ol> <li>Review Policy:</li> <li>Click <code>Next: Tags</code> (add tags if needed).</li> <li>Click <code>Next: Review</code>.</li> <li>Name the policy (e.g., <code>S3AndKMSAccessPolicy</code>).</li> <li>Add a description such as <code>Grants access to specific S3 bucket and KMS key</code>.</li> <li> <p>Click <code>Create policy</code>.</p> </li> <li> <p>Attach Policy to User:</p> </li> <li>In the left sidebar, click on <code>Users</code>.</li> <li>Select the user you created earlier.</li> <li>Click the <code>Add permissions</code> button.</li> <li>Select <code>Attach policies directly</code>.</li> <li>Search for your newly created policy by name and select it.</li> <li>Click <code>Next: Review</code> and then <code>Add permissions</code>.</li> </ol>"},{"location":"guides/aws-iam-user/terraform/","title":"S3 Access User Terraform Configuration","text":"<p>This Terraform configuration creates an IAM user with access keys and assigns a policy for S3 bucket access with KMS encryption capabilities.</p> <p>Source code</p> <p> guides/aws-iam-user/terraform/code/</p>"},{"location":"guides/aws-iam-user/terraform/#overview","title":"Overview","text":"<p>The code provisions the following AWS resources:</p> <ul> <li>IAM user</li> <li>IAM access keys for the user</li> <li>IAM policy granting access to a specific S3 bucket with KMS</li> <li>Policy attachment to give the user the appropriate permissions</li> </ul>"},{"location":"guides/aws-iam-user/terraform/#prerequisites","title":"Prerequisites","text":"<ul> <li>Terraform v1.5+</li> <li>AWS credentials with permissions to create IAM resources</li> <li>AWS CLI configured or environment variables set</li> </ul>"},{"location":"guides/aws-iam-user/terraform/#usage","title":"Usage","text":""},{"location":"guides/aws-iam-user/terraform/#configure-variables","title":"Configure Variables","text":"<p>Review and adjust values in <code>iam.auto.tfvars</code> as needed: Example configuration<pre><code>user_name             = \"obs-external\"\ncreate_iam_access_key = true\npolicy_name           = \"access-s3-analytics\"\npolicy_path           = \"/obs/analytics/\"\n\nregion = \"us-east-1\"\n\nbucket_arn = \"arn:aws:s3:::hahs-s3-example-bucket\"\nkms_key_arn = \"arn:aws:kms:eu-central-1:000000000000:key/xxxxxxx-xxxxxxx-xxxxxxx-xxxxxxx\"\n</code></pre></p>"},{"location":"guides/aws-iam-user/terraform/#initialize-terraform","title":"Initialize Terraform","text":"Terraform init<pre><code>cd docs/guides/aws-iam-user/terraform/code\nterraform init\n</code></pre>"},{"location":"guides/aws-iam-user/terraform/#preview-changes","title":"Preview changes","text":"Terraform plan<pre><code>terraform plan\n</code></pre>"},{"location":"guides/aws-iam-user/terraform/#apply-configuration","title":"Apply Configuration","text":"Terraform apply<pre><code>terraform apply\n</code></pre> <p>Danger</p> <p>Review the displayed plan and type yes to confirm applying the changes.</p>"},{"location":"guides/aws-iam-user/terraform/#retrieve-access-keys","title":"Retrieve Access Keys","text":""},{"location":"guides/aws-iam-user/terraform/#get-only-the-access-key-id","title":"Get only the Access Key ID","text":"Access Key ID<pre><code>terraform output -json | jq -r '.iam_user.value.iam_access_key_id'\n</code></pre>"},{"location":"guides/aws-iam-user/terraform/#get-only-the-secret-access-key","title":"Get only the Secret Access Key","text":"Secret Access Key<pre><code>terraform output -json | jq -r '.iam_user.value.iam_access_key_secret'\n</code></pre>"},{"location":"guides/aws-iam-user/terraform/#get-both-values-environment-variables","title":"Get both values (environment variables)","text":"ENV: Access Key ID + Secret Access Key<pre><code>terraform output -json | jq -r '\"export AWS_ACCESS_KEY_ID=\" + .iam_user.value.iam_access_key_id + \"\\nexport AWS_SECRET_ACCESS_KEY=\" + .iam_user.value.iam_access_key_secret'\n</code></pre>"},{"location":"guides/aws-iam-user/terraform/#get-both-values-json","title":"Get both values (JSON)","text":"JSON: Access Key ID + Secret Access Key<pre><code>terraform output -json | jq '{access_key: .iam_user.value.iam_access_key_id, secret_key: .iam_user.value.iam_access_key_secret}'\n</code></pre>"},{"location":"guides/aws-iam-user/terraform/#get-both-values-awscredentials","title":"Get both values (.aws/credentials)","text":"AWS Credentials: Access Key ID + Secret Access Key<pre><code>terraform output -json | jq -r '\"aws_access_key_id = \" + .iam_user.value.iam_access_key_id + \"\\naws_secret_access_key = \" + .iam_user.value.iam_access_key_secret'\n</code></pre>"},{"location":"guides/aws-iam-user/terraform/#destroy-configuration","title":"Destroy Configuration","text":"Terraform destroy<pre><code>terraform destroy\n</code></pre> <p>Danger</p> <p>Review the displayed plan and type yes to confirm destroy the configuration.</p>"},{"location":"guides/aws-iam-user/terraform/code/","title":"Index","text":""},{"location":"guides/aws-iam-user/terraform/code/#requirements","title":"Requirements","text":"Name Version terraform &gt;=1.5 aws &gt;=5"},{"location":"guides/aws-iam-user/terraform/code/#providers","title":"Providers","text":"<p>No providers.</p>"},{"location":"guides/aws-iam-user/terraform/code/#modules","title":"Modules","text":"Name Source Version iam_policy terraform-aws-modules/iam/aws//modules/iam-policy 5.58.0 iam_user terraform-aws-modules/iam/aws//modules/iam-user 5.58.0"},{"location":"guides/aws-iam-user/terraform/code/#resources","title":"Resources","text":"<p>No resources.</p>"},{"location":"guides/aws-iam-user/terraform/code/#inputs","title":"Inputs","text":"Name Description Type Default Required bucket_arn The ARN of the S3 bucket <code>string</code> n/a yes create_iam_access_key Create an IAM access key for the user <code>bool</code> <code>false</code> no create_iam_user_login_profile Create a login profile for the IAM user <code>bool</code> <code>false</code> no kms_key_arn The ARN of the KMS key <code>string</code> n/a yes policy_name The name of the policy <code>string</code> n/a yes policy_path The path to the policy <code>string</code> n/a yes region The AWS region where the resources will be created <code>string</code> n/a yes tags A map of tags to assign to the user and policy <code>map(string)</code> <code>{}</code> no user_force_destroy Force destroy the IAM user <code>bool</code> <code>false</code> no user_iam_access_key_status Status of the IAM access key for the user <code>string</code> <code>\"Active\"</code> no user_name Desired name for the IAM user <code>string</code> n/a yes user_password_length Length of the password for the IAM user <code>number</code> <code>16</code> no user_password_reset_required Whether the IAM user must reset their password upon first login <code>bool</code> <code>true</code> no user_path The path to the IAM user <code>string</code> <code>\"/\"</code> no user_permissions_boundary The ARN of the permissions boundary for the IAM user <code>string</code> <code>\"\"</code> no user_pgp_key The PGP key for the IAM user <code>string</code> <code>\"\"</code> no user_ssh_key_encoding The encoding of the SSH key for the IAM user <code>string</code> <code>\"SSH\"</code> no user_ssh_public_key The SSH public key for the IAM user <code>string</code> <code>\"\"</code> no user_upload_iam_user_ssh_key Whether to upload the SSH public key for the IAM user <code>bool</code> <code>false</code> no"},{"location":"guides/aws-iam-user/terraform/code/#outputs","title":"Outputs","text":"Name Description iam_policy n/a iam_user n/a"},{"location":"guides/aws-privatelink-connection/","title":"AWS Privatelink connection","text":"<p>Info</p> <p>This guide provides instructions for securely connecting your AWS resources to a third-party or cross-account service using AWS PrivateLink.</p> <p>It covers both the <code>step-by-step console approach</code> and an <code>automated Terraform workflow</code>, ensuring private connectivity and robust security best practices for consuming remote services.</p>"},{"location":"guides/aws-privatelink-connection/#guides","title":"Guides","text":"<ul> <li> <p> Step-by-Step Guide</p> <p>A detailed walkthrough for configuring an Interface VPC Endpoint in the AWS Console to connect to an externally provided PrivateLink service, including best practices for security groups and DNS.</p> </li> </ul> <p>Warning</p> <p>This guide provides a generic configuration example intended for informational purposes only.</p> <p>Users must thoroughly test all configurations in a non-production environment before deploying to a production system.</p> <p>We are not responsible for any direct or indirect harm, damages, or operational issues resulting from the use or misapplication of this guide without prior validation.</p>"},{"location":"guides/aws-privatelink-connection/step-by-step/","title":"AWS Privatelink Connection Setup Guide","text":"<p>Info</p> <ul> <li> <p>You want to access a service in another <code>AWS account</code> or third-party that is exposed via <code>AWS PrivateLink</code>.</p> </li> <li> <p>The service provider gives you a Service Name and a Private DNS Name (for example, api.partner.com).</p> </li> <li> <p>For this connection to work, both endpoints need to be in the same <code>AWS Region</code>, for cross-region please follow this documentation</p> </li> </ul>"},{"location":"guides/aws-privatelink-connection/step-by-step/#obtain-service-information","title":"Obtain Service Information","text":"<p>Contact the service provider and request:</p> <ul> <li>Service Name<ul> <li>example: <code>com.amazonaws.vpce.us-east-1.vpce-svc-f9330539c752b7993</code></li> </ul> </li> <li>Service Private DNS Name<ul> <li>example: <code>api.partner.com</code></li> </ul> </li> </ul>"},{"location":"guides/aws-privatelink-connection/step-by-step/#visual-connection-flow","title":"Visual connection flow","text":"<pre><code>flowchart TD\n    A[\"Your VPC resources&lt;br/&gt;(EC2, Lambda, ECS, etc.)\"]\n    B[\"VPC Endpoint&lt;br/&gt;(Interface Endpoint)\"]\n    C[\"AWS Private Network\"]\n    D[\"Service Provider's VPC\"]\n    E[\"Service&lt;br/&gt;at api.partner.com\"]\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n</code></pre>"},{"location":"guides/aws-privatelink-connection/step-by-step/#create-a-vpc-endpoint","title":"Create a VPC Endpoint","text":"<ol> <li>Sign in to <code>AWS</code> Console:<ul> <li>Go to the <code>AWS Management Console</code> and log in using your <code>AWS credentials</code>.</li> </ul> </li> <li>Navigate to <code>VPC</code>:<ul> <li>In the top search bar, type <code>VPC</code> and select the <code>Endpoints</code>.</li> </ul> </li> <li>Create a New Enpoint:<ul> <li>Click the <code>Create Enpoint</code> button.</li> </ul> </li> <li>Configure Endpoint Details.<ul> <li>Service Type: <code>Select 'PrivateLink Ready partner services'</code>.</li> <li>Service Name: <code>Enter the service name provided above</code>.</li> <li>Verify: <code>Click Verify to make sure AWS can resolve the service</code>.</li> </ul> </li> <li>Specify VPC:<ul> <li>Select the <code>VPC</code> where your workloads that need to access the service are running.</li> </ul> </li> <li>Select Subnets:<ul> <li>Choose at least one <code>subnet</code> per <code>Availability Zone</code> you want the endpoint to be available in.</li> </ul> </li> <li>Set Security Groups:<ul> <li>Assign a Security Group to the endpoint\u2019s <code>ENIs</code>.<ul> <li>See section \"How to Create a Security Group Restricting Traffic from Your VPC\" below for a best practice!</li> </ul> </li> </ul> </li> <li> <p>Configure Policy (Optional):</p> <ul> <li>Set the endpoint policy (default is full access).<ul> <li>You can use this to restrict which <code>IAM principals</code> and resources in your account are allowed to use this endpoint.</li> </ul> </li> </ul> </li> <li> <p>Enable Private DNS Name</p> <ul> <li>If the service provider supports Private DNS, enable this option.<ul> <li>Now, resources in your VPC will transparently access the service at <code>api.partner.com</code> via <code>PrivateLink</code>.</li> </ul> </li> </ul> </li> <li> <p>Create the Endpoint</p> <ul> <li>Review and click <code>Create endpoint</code>.</li> </ul> </li> </ol>"},{"location":"guides/aws-privatelink-connection/step-by-step/#endpoint-acceptance","title":"Endpoint Acceptance","text":"<p>Warning</p> <p>If the endpoint is in Pending acceptance state, let the service provider know, it might need be manually approved.</p>"},{"location":"guides/aws-privatelink-connection/step-by-step/#testing-and-validation","title":"Testing and Validation","text":"<p>Once the endpoint status is Available, you can use it.</p> <ol> <li> <p>Test DNS resolution within your VPC (from an EC2 instance, for example):</p> Query dns record<pre><code>dig api.partner.com\n</code></pre> <p>It should resolve to the private IP address(es) of your VPC endpoint's ENIs.</p> </li> <li> <p>Test service access from inside your VPC:</p> Test service access<pre><code>curl https://api.partner.com/\n</code></pre> </li> </ol>"},{"location":"guides/aws-privatelink-connection/step-by-step/#how-to-create-a-security-group-restricting-traffic-from-your-vpc","title":"How to Create a Security Group Restricting Traffic from Your VPC","text":"<ol> <li> <p>To ensure only resources in your VPC can use the endpoint:</p> <ul> <li>Identify Your <code>VPC CIDR</code><ul> <li>In the AWS Console, navigate to <code>VPC</code> &gt; <code>Your VPCs</code>.</li> </ul> </li> <li>Find your VPC and copy its IPv4 CIDR Block<ul> <li>example: <code>10.0.0.0/16</code>.</li> </ul> </li> </ul> </li> <li> <p>Create a New Security Group</p> <ul> <li>Go to <code>VPC</code> &gt; <code>Security Groups</code>.</li> <li>Click <code>Create Security Group</code>.<ul> <li>Name: <code>privatelink-endpoint-sg</code></li> <li>Description: <code>Allow from my VPC</code>.</li> <li>VPC: <code>Select your VPC</code></li> </ul> </li> </ul> </li> <li> <p>Add Inbound Rule(s)</p> <ul> <li>Set an inbound rule to allow expected traffic from your VPC only:</li> </ul> </li> </ol> <p>Configuration</p> <p>We will assume here that remote service is running on port <code>443</code></p> Type Protocol Port Range Source Description HTTPS TCP 443 10.0.0.0/16 Allow VPC only <ol> <li> <p>Attach Security Group to the Endpoint</p> <ul> <li>When creating or editing your VPC Endpoint, choose <code>privatelink-endpoint-sg</code> as the Security Group.</li> </ul> </li> </ol>"}]}